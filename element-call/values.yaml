global:
  image:
    # -- if set it will overwrite all registry entries
    registry:
    # -- if set it will overwrite all pullPolicy
    pullPolicy:

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

service:
  call:
    # -- replicas
    replicaCount: 1
    image:
      # -- image registry (could be overwritten by global.image.registry)
      registry: ghcr.io
      # -- image repository
      repository: element-hq/element-call
      # -- This sets the pull policy for images. (could be overwritten by global.image.pullPolicy)
      pullPolicy: IfNotPresent
      # -- image tag - Overrides the image tag whose default is the chart appVersion
      tag:
    config: {}
    ingress:
      host:
    networkPolicy:
      enabled: false
      ingress:
        # -- ingress for http port (e.g. ingress-controller)
        http: []
      egress:
        # -- activate egress no networkpolicy
        enabled: true
        # -- egress rules
        extra: []
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http
    resources: {}
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Automatically mount a ServiceAccount's API credentials?
      automount: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    podAnnotations: {}
    podLabels: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    nodeSelector: {}
    tolerations: []
    affinity: {}

  lkJWT:
    # -- enable to deploy livekit jwt service for element-call
    # @section -- livekit JWT
    enabled: true
    # -- replicas
    # @section -- livekit JWT
    replicaCount: 1
    image:
      # -- image registry (could be overwritten by global.image.registry)
      # @section -- livekit JWT
      registry: ghcr.io
      # -- image repository
      # @section -- livekit JWT
      repository: element-hq/lk-jwt-service
      # -- This sets the pull policy for images. (could be overwritten by global.image.pullPolicy)
      # @section -- livekit JWT
      pullPolicy: IfNotPresent
      # -- image tag
      # @section -- livekit JWT
      tag: 0.2.3
    config:
      # -- url to livekit
      # @section -- livekit JWT
      url: ""
      # -- key to livekit
      # @section -- livekit JWT
      key: "devkey"
      # -- secret to livekit
      # @section -- livekit JWT
      secret: "secret"
    ingress:
      host:
    networkPolicy:
      enabled: false
      ingress:
        # -- ingress for http port (e.g. ingress-controller)
        # @section -- livekit JWT
        http: []
      egress:
        # -- activate egress no networkpolicy
        # @section -- livekit JWT
        enabled: false
        # -- egress rules
        # @section -- livekit JWT
        extra: []
    livenessProbe:
      httpGet:
        path: /healthz
        port: http
    readinessProbe:
      httpGet:
        path: /healthz
        port: http
    resources: {}
    serviceAccount:
      # -- Specifies whether a service account should be created
      # @section -- livekit JWT
      create: true
      # -- Automatically mount a ServiceAccount's API credentials?
      # @section -- livekit JWT
      automount: true
      # -- Annotations to add to the service account
      # @section -- livekit JWT
      annotations: {}
      # -- The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      # @section -- livekit JWT
      name: ""

    podAnnotations: {}
    podLabels: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    nodeSelector: {}
    tolerations: []
    affinity: {}
