apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "headscale.fullname" . }}
  labels:
    {{- include "headscale.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "headscale.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        config-hash: {{ toYaml .Values.headscale.config | sha256sum | trunc 32 }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "headscale.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.headplane.enabled }}
      shareProcessNamespace: true
      {{- end }}
      serviceAccountName: {{ include "headscale.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        {{- if .Values.headplane.enabled }}
        - name: headplane
          {{- with .Values.headplane.image }}
          image: {{ .registry }}/{{ .repository }}:{{ .tag | default "latest" }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          ports:
            - name: ui-http
              containerPort: {{ .Values.headplane.config.server.port }}
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ include "headscale.fullname" . }}-api-key
          env:
            - name: HEADPLANE_LOAD_ENV_OVERRIDES
              value: 'true'
            - name: HEADPLANE_INTEGRATION__KUBERNETES__POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: HEADPLANE_OIDC__HEADSCALE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "headscale.fullname" . }}-api-key
                  key: HEADPLANE_OIDC__HEADSCALE_API_KEY
            # - name: HEADPLANE_INTEGRATION__AGENT__PRE_AUTHKEY
            #     secretKeyRef:
            #       name: {{ include "headscale.fullname" . }}-api-key
            #       key: HEADPLANE_INTEGRATION__AGENT__PRE_AUTHKEY
          volumeMounts:
            # {{- if .Values.headscale.certmanager.enabled }}
            # - name: headscale-certs
            #   mountPath: "/etc/headscale/certs"
            #   readOnly: true
            # {{- end }}
            - name: config
              mountPath: /etc/headscale/
              readOnly: true
            - name: headplane-config
              mountPath: /etc/headplane/
              readOnly: true
            - name: data
              mountPath: /var/lib/headplane/
              subPath: headplane
        {{- end }}
        - name: headscale
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- with .Values.image }}
          image: "{{ .registry }}/{{ .repository }}:{{ .tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          args:
            - "serve"
          ports:
            - name: http
              containerPort: {{ .Values.service.port.http }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.port.metrics }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.service.port.grpc }}
              protocol: TCP
            {{- if .Values.headscale.config.derp.server.enabled }}
            - name: derp
              containerPort: {{ .Values.service.derp.port }}
              protocol: UDP
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTPS
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: "/etc/headscale"
              readOnly: true
            - name: keys
              mountPath: "/etc/headscale/secrets"
              readOnly: true
            {{- if .Values.headscale.certmanager.enabled }}
            - name: certs
              mountPath: "/etc/headscale/certs"
              readOnly: true
            {{- end }}
            - name: "data"
              mountPath: "/var/lib/headscale"
              subPath: headscale
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          secret:
            secretName: {{ include "headscale.fullname" . }}
            items:
             - key: "config.yaml"
               path: "config.yaml"
        {{- if .Values.headplane.enabled }}
        - name: headplane-config
          secret:
            secretName: {{ include "headscale.fullname" . }}-headplane
            items:
             - key: config.yaml
               path: config.yaml
        {{- end }}
        - name: keys
          secret:
            secretName: {{ default (print ( include "headscale.fullname" . ) "-keys") $.Values.headscale.keys.existingSecret | quote }}
            items:
             - key: "wireguard.key"
               path: "wireguard.key"
             - key: "noise.key"
               path: "noise.key"
             - key: "derp.key"
               path: "derp.key"
        {{- if .Values.headscale.certmanager.enabled }}
        - name: certs
          secret:
            secretName: {{ include "headscale.fullname" . }}-cert
            items:
             - key: "tls.crt"
               path: "tls.crt"
             - key: "tls.key"
               path: "tls.key"
        {{- end }}
        - name: "data"
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default .Values.persistence.existingClaim (include "headscale.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
